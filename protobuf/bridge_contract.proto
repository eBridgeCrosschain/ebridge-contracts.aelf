syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "callback_input.proto";
import "authority_info.proto";

option csharp_namespace = "EBridge.Contracts.Bridge";

service BridgeContract {
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}
    
    //Contract permission.
    rpc ChangeController(aelf.Address) returns (google.protobuf.Empty){}
    rpc ChangeAdmin(aelf.Address) returns (google.protobuf.Empty) {}
    rpc ChangeTransactionFeeController(AuthorityInfo) returns (google.protobuf.Empty){}
    rpc ChangeRestartOrganization(aelf.Address) returns (google.protobuf.Empty){}
    rpc ChangePauseController(aelf.Address) returns (google.protobuf.Empty){}
    rpc ChangeApproveTransferController(aelf.Address) returns (google.protobuf.Empty){}
    
    rpc Pause(google.protobuf.Empty) returns (google.protobuf.Empty){}
    rpc Restart(google.protobuf.Empty) returns (google.protobuf.Empty){}

    //Contract admin : Approve
    rpc SetTokenMaximumAmount(SetMaximumAmountInput) returns (google.protobuf.Empty){}
    rpc ApproveTransfer(ApproveTransferInput) returns (google.protobuf.Empty){}
    
    rpc IsTransferCanReceive(IsTransferCanReceiveInput) returns(google.protobuf.BoolValue){
        option (aelf.is_view) = true;
    }
    rpc GetContractController(google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
    rpc GetContractAdmin(google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
    rpc GetTransactionFeeRatioController(google.protobuf.Empty) returns (AuthorityInfo){
        option (aelf.is_view) = true;
    }
    rpc IsContractPause(google.protobuf.Empty) returns (google.protobuf.BoolValue){
        option (aelf.is_view) = true;
    }
    rpc GetPauseController(google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
    rpc GetRestartOrganization(google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
    rpc GetTokenMaximumAmount (google.protobuf.StringValue) returns (google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetApproveReceiptIdList (google.protobuf.Empty) returns (ReceiptIdList){
        option (aelf.is_view) = true;
    }
    rpc GetApproveTransferController(google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
    
    //Others to AElf.
    //Action methods.
    rpc CreateSwap (CreateSwapInput) returns (aelf.Hash) {
    }
    rpc SwapToken (SwapTokenInput) returns (google.protobuf.Empty) {
    }
    rpc ChangeSwapRatio (ChangeSwapRatioInput) returns (google.protobuf.Empty) {
    }
    rpc Deposit (DepositInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (WithdrawInput) returns (google.protobuf.Empty) {
    }
    rpc FulfillQuery (CallbackInput) returns (google.protobuf.Empty) {
    }
    //View methods.
    rpc GetSwapIdByToken(GetSwapIdByTokenInput) returns (aelf.Hash){
        option (aelf.is_view) = true;
    }
    rpc GetSwapInfo (aelf.Hash) returns (SwapInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetSwapPairInfo(GetSwapPairInfoInput) returns (SwapPairInfo){
        option (aelf.is_view) = true;
    }
    rpc GetSwapAmounts (GetSwapAmountsInput) returns (SwapAmounts) {
        option (aelf.is_view) = true;
    }
    rpc GetSwappedReceiptInfo (GetSwappedReceiptInfoInput) returns (SwappedReceiptInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetSpaceIdBySwapId (aelf.Hash) returns (aelf.Hash){
        option (aelf.is_view) = true;
    }
    
    //AElf to others.
    //Action methods.
    rpc AddToken(AddTokenInput) returns(google.protobuf.Empty){
    }
    rpc RemoveToken(RemoveTokenInput) returns (google.protobuf.Empty){
    }
    rpc CreateReceipt(CreateReceiptInput) returns (google.protobuf.Empty){
    }
    //Gas Fee.
    rpc SetGasLimit(SetGasLimitInput) returns(google.protobuf.Empty){
    }
    rpc SetGasPrice(SetGasPriceInput) returns (google.protobuf.Empty){
    }
    rpc SetPriceRatio(SetRatioInput) returns (google.protobuf.Empty){
    }
    rpc SetFeeFloatingRatio(SetRatioInput) returns (google.protobuf.Empty){
    }
    rpc SetPriceFluctuationRatio (SetRatioInput) returns (google.protobuf.Empty){
    }
    rpc WithdrawTransactionFee(google.protobuf.Int64Value) returns (google.protobuf.Empty){
    }
    //View methods.
    rpc GetGasLimit(google.protobuf.StringValue) returns (google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetGasPrice(google.protobuf.StringValue) returns(google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetPriceRatio(google.protobuf.StringValue) returns (google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetFeeFloatingRatio(google.protobuf.StringValue) returns (google.protobuf.StringValue){
        option (aelf.is_view) = true;
    }
    rpc GetFeeByChainId(google.protobuf.StringValue) returns (google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetCurrentTransactionFee(google.protobuf.Empty) returns(google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetPriceFluctuationRatio(google.protobuf.StringValue) returns (google.protobuf.Int32Value){
        option (aelf.is_view) = true;
    }
    rpc GetReceiptIdInfo(aelf.Hash) returns (ReceiptIdInfo){
        option (aelf.is_view) = true;
    }
    rpc GetReceiptInfo(google.protobuf.StringValue) returns (Receipt){
        option (aelf.is_view) = true;
    }
    rpc GetTokenWhitelist(google.protobuf.StringValue) returns (TokenSymbolList){
        option (aelf.is_view) = true;
    }
    
}

message InitializeInput {
    aelf.Address oracle_contract_address = 1;
    aelf.Address merkle_tree_contract_address = 2;
    aelf.Address regiment_contract_address = 3;
    aelf.Address report_contract_address = 4;
    aelf.Address admin = 5;
    aelf.Address controller = 6;
    aelf.Address organization_address = 7;
    aelf.Address pause_controller = 8;
    aelf.Address approve_transfer_controller = 9;
}

message SetMaximumAmountInput{
    repeated TokenMaximumAmount value = 1;
}

message TokenMaximumAmount{
    string symbol = 1;
    int64 maximum_amount = 2;
}

message ApproveTransferInput{
    string receipt_id = 1;
}

message IsTransferCanReceiveInput{
    string receipt_id = 1;
    string symbol = 2;
    string amount = 3;
}

//To AElf message.
message SwapRatio {
    int64 origin_share = 1;
    int64 target_share = 2;
}

message SwapTargetToken {
    string symbol = 1;
    SwapRatio swap_ratio = 2;
    string from_chain_id = 3;
}

message SwapInfo {
    aelf.Hash swap_id = 1;
    SwapTargetToken swap_target_token = 2;
    aelf.Hash regiment_id = 3;
    aelf.Hash space_id = 4;
}

message SwapPairInfo {
    int64 swapped_amount = 1;
    int64 swapped_times = 2;
    int64 deposit_amount = 3;
}

message SwapAmounts {
    aelf.Address receiver = 1;
    map<string, int64> received_amounts = 2;
}

message SwappedReceiptInfo {
    string receipt_id = 1;
    aelf.Hash receiving_tx_id = 2;
    google.protobuf.Timestamp receiving_time = 3;
    map<string, int64> amount_map = 4;
}

message ReceiptHashMap {
    map<string, string> value = 1;
    string swap_id = 2;
}

message ReceiptIdList {
    repeated string value = 1;
}

message ReceiptIdInfo{
    string chain_id = 1;
    string symbol = 2;
}

message SendingInfo {
    int64 receipt_id = 1;
    string sending_tx_id = 2;
    string sending_time = 3;
}

message CreateSwapInput {
    SwapTargetToken swap_target_token = 1;
    aelf.Hash regiment_id = 2;
    int32 merkle_tree_leaf_limit = 3;
}

message DepositInput {
    aelf.Hash swap_id = 1;
    string target_token_symbol = 2;
    int64 amount = 3;
}

message ChangeSwapRatioInput {
    aelf.Hash swap_id = 1;
    SwapRatio swap_ratio = 2;
    string target_token_symbol = 3;
}

message SwapTokenInput {
    aelf.Hash swap_id = 1;
    string receipt_id = 2;
    string origin_amount = 3;
    aelf.Address receiver_address = 4;
}

message WithdrawInput {
    aelf.Hash swap_id = 1;
    string target_token_symbol = 2;
    int64 amount = 3;
}

message GetSwapAmountsInput {
    aelf.Hash swap_id = 1;
    string receipt_id = 2;
}

message GetSwapPairInfoInput{
    aelf.Hash swap_id = 1;
    string symbol = 2;
}

message GetSwappedReceiptInfoInput {
    aelf.Hash swap_id = 1;
    string receipt_id = 2;
}

//AElf to others message.
message Receipt{
    string symbol = 1;
    aelf.Address owner = 2;
    string targetAddress = 3;
    int64 amount = 4;
} 
message ReceiptList{
    repeated Receipt value = 1;
}

message ChainToken{
    string chain_id = 1;
    string symbol = 2;
}

message ChainTokenList{
    repeated ChainToken value = 1;
}

message TokenSymbolList {
    repeated string symbol = 1;
}

message GasPrice{
    string chain_id = 1;
    int64 gas_price = 2;
}

message GasLimit{
    string chain_id = 1;
    int64 gas_limit = 2;
}

message Ratio{
    string chain_id = 1;
    int64 ratio = 2;
}

message AddTokenInput{
    repeated ChainToken value = 1;
}

message RemoveTokenInput{
    repeated ChainToken value = 1;
}

message CreateReceiptInput{
    string symbol = 1;
    aelf.Address owner = 2;
    string targetAddress = 3;
    int64 amount = 4;
    string target_chain_id = 5;
}

message SetGasLimitInput{
    repeated GasLimit gas_limit_list = 1;
}
message SetGasPriceInput{
    repeated GasPrice gas_price_list = 1;
}

message SetRatioInput{
    repeated Ratio value = 1;
}

message GetReceiptInfoInput{
    string receipt_id = 1;
}

message GetOwnerLockReceiptInput{
    aelf.Address owner = 1;
}

message GetLockTokensInput{
    aelf.Address owner = 1;
}

message GetSwapIdByTokenInput{
  string chain_id = 1;
  string symbol = 2;
}




// Events

message SwapRatioChanged {
    option (aelf.is_event) = true;
    aelf.Hash swap_id = 1;
    SwapRatio new_swap_ratio = 2;
    string target_token_symbol = 3;
}

message TokenSwapped {
    option (aelf.is_event) = true;
    aelf.Address address = 1;
    int64 amount = 2;
    string symbol = 3;
    string receipt_id = 4;
    string from_chain_id = 5;
}

message SwapInfoAdded {
    option (aelf.is_event) = true;
    aelf.Hash swap_id = 1;
    string from_chain_id = 2;
    string symbol = 3;
}

message TokenWhitelistAdded{
    option (aelf.is_event) = true;
    ChainTokenList chain_token_list = 1;
}

message TokenWhitelistRemoved{
    option (aelf.is_event) = true;
    ChainTokenList chain_token_list = 1;
}

message ReceiptCreated{
    option (aelf.is_event) = true;
    string receipt_id = 1;
    string symbol = 2;
    aelf.Address owner = 3;
    string targetAddress = 4;
    int64 amount = 5;
    string target_chain_id = 6;
}

message Paused{
    option (aelf.is_event) = true;
    aelf.Address sender = 1;
}

message Unpaused{
    option (aelf.is_event) = true;
    aelf.Address sender = 1;
}

message ApproveTransfer{
    option (aelf.is_event) = true;
    aelf.Address sender = 1;
    string receipt_id = 2;  
}